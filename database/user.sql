-- ============================================================================
-- Enhanced User Schema with Enforced Random User IDs
-- Date: 2025-05-20 14:38:05
-- User: Kinabler
-- ============================================================================

   SET SERVEROUTPUT ON;

-- Drop existing tables if they exist
begin
   execute immediate 'DROP TABLE user_profiles CASCADE CONSTRAINTS';
exception
   when others then
      if sqlcode != -942 then
         raise;
      end if;
end;
/

begin
   execute immediate 'DROP TABLE users CASCADE CONSTRAINTS';
exception
   when others then
      if sqlcode != -942 then
         raise;
      end if;
end;
/

begin
   execute immediate 'DROP TABLE flag1 CASCADE CONSTRAINTS';
exception
   when others then
      if sqlcode != -942 then
         raise;
      end if;
end;
/

-- Create function for generating random IDs
create or replace function gen_random_id return number is
   v_rand_num varchar2(20);
begin
    -- Generate first digit as 1-9 (avoid leading zeros)
   v_rand_num := to_char(trunc(dbms_random.value(
      1,
      10
   )));
    
    -- Add 19 more random digits
   for i in 2..20 loop
      v_rand_num := v_rand_num
                    || to_char(trunc(dbms_random.value(
         0,
         10
      )));
   end loop;

   return to_number ( v_rand_num );
end;
/

-- Create users table with proper random ID handling
create table users (
   user_id       number primary key, -- Will be set by trigger
   username      varchar2(50) not null unique,
   password_hash varchar2(255) not null,
   email         varchar2(100) not null unique,
   role          varchar2(20) default 'user' not null,
   created_at    date default sysdate,
   updated_at    date
);

-- Create user_profiles table with the same user_id
create table user_profiles (
   profile_id   number
      generated by default as identity
   primary key,
   user_id      number not null,
   full_name    varchar2(100),
   address      varchar2(255),
   phone_number varchar2(20),
   hobbies      varchar2(255),
   avatar_url   varchar2(255),
   birthday     date,
   gender       varchar2(10),
   constraint fk_user_profile_user foreign key ( user_id )
      references users ( user_id )
         on delete cascade
);

create table flag1 (
   flag_id   varchar2(10),
   flag_name varchar2(50)
);

-- Force any manual user_id to be replaced with a random one
create or replace trigger trg_enforce_random_user_id before
   insert on users
   for each row
begin
   :new.user_id := gen_random_id();
end;
/

-- Create trigger for automatic user profile creation
create or replace trigger trg_create_user_profile after
   insert on users
   for each row
begin
   insert into user_profiles (
      user_id,
      full_name
   ) values ( :new.user_id,
              :new.username );
end;
/

-- Insert flag data
insert into flag1 (
   flag_id,
   flag_name
) values ( 'flag',
           'G2{Retrieve_database_from_SQL_injection_1}' );

-- Insert users - now we don't need to specify user_id, it will be auto-generated
begin
    -- Insert just 3 users + current user without manually specifying user_id
    -- The trigger will automatically generate random IDs
   insert into users (
      username,
      password_hash,
      email,
      role,
      created_at
   ) values ( 'alice',
              'hashpass1',
              'alice@example.com',
              'user',
              sysdate - 10 );

   insert into users (
      username,
      password_hash,
      email,
      role,
      created_at
   ) values ( 'bob',
              'hashpass2',
              'bob@example.com',
              'user',
              sysdate - 9 );
    
    -- Admin user
   insert into users (
      username,
      password_hash,
      email,
      role,
      created_at
   ) values ( 'administrator',
              '123abc',
              'admin@dbs401.com',
              'admin',
              sysdate - 5 );
    
    -- Current user
   insert into users (
      username,
      password_hash,
      email,
      role,
      created_at,
      updated_at
   ) values ( 'Kinabler',
              'securepassword',
              'kinabler@example.com',
              'user',
              sysdate,
              to_date('2025-05-20 14:38:05','YYYY-MM-DD HH24:MI:SS') );

   -- public user
   insert into users (
      username,
      password_hash,
      email,
      role,
      created_at,
      updated_at
   ) values ( 'wiener',
              'peter',
              'wiener@example.com',
              'user',
              sysdate,
              to_date('2025-05-20 14:38:05','YYYY-MM-DD HH24:MI:SS') );

   commit;
   dbms_output.put_line('Users inserted successfully with auto-generated random IDs.');
end;
/

-- Update user profiles with detailed information
begin
   update user_profiles
      set full_name = 'Alice Nguyen',
          address = '123 Main St, Hanoi',
          phone_number = '0901234567',
          hobbies = 'Reading, Painting',
          birthday = to_date('1995-01-01','YYYY-MM-DD'),
          gender = 'Female'
    where user_id = (
      select user_id
        from users
       where username = 'alice'
   );

   update user_profiles
      set full_name = 'Bob Tran',
          address = '456 Le Loi, HCMC',
          phone_number = '0912345678',
          hobbies = 'Football, Music',
          birthday = to_date('1992-05-15','YYYY-MM-DD'),
          gender = 'Male'
    where user_id = (
      select user_id
        from users
       where username = 'bob'
   );

   update user_profiles
      set full_name = 'Admin User',
          address = '789 System Road, Server City',
          phone_number = '0987654321',
          hobbies = 'System Administration, Security',
          birthday = to_date('1985-10-20','YYYY-MM-DD'),
          gender = 'Male'
    where user_id = (
      select user_id
        from users
       where username = 'administrator'
   );

   update user_profiles
      set full_name = 'Kinabler Admin',
          address = '101 Digital Way, Hanoi',
          phone_number = '0909876543',
          hobbies = 'Programming, Security',
          birthday = to_date('1990-06-15','YYYY-MM-DD'),
          gender = 'Male'
    where user_id = (
      select user_id
        from users
       where username = 'Kinabler'
   );

   commit;
   dbms_output.put_line('Profiles updated successfully.');
end;
/

-- Test random ID enforcement with a deliberate manual ID (which will be replaced)
declare
   v_manual_id number := 12345; -- This value will be ignored by trigger
   v_actual_id number;
begin
    -- Try to insert with a manual ID
   insert into users (
      user_id,
      username,
      password_hash,
      email
   ) values ( v_manual_id,
              'test_user',
              'test_hash',
              'test@example.com' );
    
    -- Retrieve the actual ID that was assigned
   select user_id
     into v_actual_id
     from users
    where username = 'test_user';
    
    -- Show that the manual ID was replaced with a random one
   dbms_output.put_line('Attempted to insert user_id: ' || v_manual_id);
   dbms_output.put_line('Actual assigned user_id: ' || v_actual_id);
   dbms_output.put_line('Random ID enforcement working: '
                        || case
      when v_manual_id != v_actual_id then
         'YES'
      else 'NO'
   end);
    
    -- Clean up test user
   delete from users
    where username = 'test_user';
   commit;
end;
/

-- Show all users and their random IDs
begin
   dbms_output.put_line('--------------------------------------------------------------------------');
   dbms_output.put_line('USER INFORMATION WITH RANDOM IDs:');
   dbms_output.put_line('--------------------------------------------------------------------------');
   dbms_output.put_line(rpad(
      'USERNAME',
      15
   )
                        || ' | '
                        || rpad(
      'USER_ID',
      22
   )
                        || ' | '
                        || rpad(
      'ROLE',
      10
   )
                        || ' | '
                        || 'FULL_NAME');
   dbms_output.put_line('--------------------------------------------------------------------------');
   for u in (
      select u.username,
             u.user_id,
             u.role,
             p.full_name
        from users u
        join user_profiles p
      on u.user_id = p.user_id
       order by u.created_at
   ) loop
      dbms_output.put_line(rpad(
         u.username,
         15
      )
                           || ' | '
                           || rpad(
         u.user_id,
         22
      )
                           || ' | '
                           || rpad(
         u.role,
         10
      )
                           || ' | '
                           || u.full_name);
   end loop;
   dbms_output.put_line('--------------------------------------------------------------------------');
end;
/

-- Verify counts
declare
   v_user_count    number;
   v_profile_count number;
begin
   select count(*)
     into v_user_count
     from users;
   select count(*)
     into v_profile_count
     from user_profiles;

   dbms_output.put_line('Setup completed successfully!');
   dbms_output.put_line('Total users: ' || v_user_count);
   dbms_output.put_line('Total profiles: ' || v_profile_count);
   dbms_output.put_line('Security Enhancement: All user_ids are now automatically randomized via trigger');
   dbms_output.put_line('Current timestamp: ' || to_char(
      sysdate,
      'YYYY-MM-DD HH24:MI:SS'
   ));
end;
/

exit;